{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sehal\\\\OneDrive\\\\Desktop\\\\pearlthoughts\\\\src\\\\components\\\\CalendarPreview.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useRecurrenceStore } from \"../store/recurrenceStore\";\nimport { getRecurringDates } from \"../utils/recurrenceUtils\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CalendarPreview() {\n  _s();\n  const {\n    frequency,\n    interval,\n    weekdays,\n    pattern,\n    startDate,\n    endDate\n  } = useRecurrenceStore();\n  const recurringDates = getRecurringDates({\n    frequency,\n    interval,\n    weekdays,\n    pattern,\n    startDate,\n    endDate\n  });\n\n  // Show calendar for the month of startDate or today\n  const baseDate = startDate ? new Date(startDate) : new Date();\n  const monthStart = startOfMonth(baseDate);\n  const monthEnd = endOfMonth(baseDate);\n  const days = eachDayOfInterval({\n    start: monthStart,\n    end: monthEnd\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"font-semibold mb-2\",\n      children: \"Calendar Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"w-full border-collapse text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map(d => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-1 text-xs font-medium text-gray-500\",\n              children: d\n            }, d, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: getCalendarRows(days, recurringDates)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarPreview, \"WkH24Q2Yo4XK/2lZB8FMQGmYIXs=\", false, function () {\n  return [useRecurrenceStore];\n});\n_c = CalendarPreview;\nfunction getCalendarRows(days, recurringDates) {\n  const rows = [];\n  let week = [];\n  let dayIdx = days[0].getDay();\n  // Fill initial empty cells\n  for (let i = 0; i < dayIdx; i++) week.push(/*#__PURE__*/_jsxDEV(\"td\", {}, \"empty-\" + i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 46\n  }, this));\n  days.forEach((day, i) => {\n    const isRecurring = recurringDates.some(d => isSameDay(d, day));\n    week.push(/*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"p-1 \" + (isRecurring ? \"bg-blue-500 text-white rounded-full font-bold\" : \"text-gray-700\"),\n      children: format(day, \"d\")\n    }, day.toISOString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this));\n    if (week.length === 7 || i === days.length - 1) {\n      rows.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: week\n      }, day.toISOString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this));\n      week = [];\n    }\n  });\n  return rows;\n}\nvar _c;\n$RefreshReg$(_c, \"CalendarPreview\");","map":{"version":3,"names":["React","useRecurrenceStore","getRecurringDates","format","startOfMonth","endOfMonth","eachDayOfInterval","isSameDay","jsxDEV","_jsxDEV","CalendarPreview","_s","frequency","interval","weekdays","pattern","startDate","endDate","recurringDates","baseDate","Date","monthStart","monthEnd","days","start","end","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","d","getCalendarRows","_c","rows","week","dayIdx","getDay","i","push","forEach","day","isRecurring","some","toISOString","length","$RefreshReg$"],"sources":["C:/Users/sehal/OneDrive/Desktop/pearlthoughts/src/components/CalendarPreview.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useRecurrenceStore } from \"../store/recurrenceStore\";\r\nimport { getRecurringDates } from \"../utils/recurrenceUtils\";\r\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay } from \"date-fns\";\r\n\r\nexport default function CalendarPreview() {\r\n  const { frequency, interval, weekdays, pattern, startDate, endDate } = useRecurrenceStore();\r\n  const recurringDates = getRecurringDates({ frequency, interval, weekdays, pattern, startDate, endDate });\r\n\r\n  // Show calendar for the month of startDate or today\r\n  const baseDate = startDate ? new Date(startDate) : new Date();\r\n  const monthStart = startOfMonth(baseDate);\r\n  const monthEnd = endOfMonth(baseDate);\r\n  const days = eachDayOfInterval({ start: monthStart, end: monthEnd });\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"font-semibold mb-2\">Calendar Preview</h2>\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"w-full border-collapse text-center\">\r\n          <thead>\r\n            <tr>\r\n              {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((d) => (\r\n                <th key={d} className=\"p-1 text-xs font-medium text-gray-500\">{d}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {getCalendarRows(days, recurringDates)}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getCalendarRows(days, recurringDates) {\r\n  const rows = [];\r\n  let week = [];\r\n  let dayIdx = days[0].getDay();\r\n  // Fill initial empty cells\r\n  for (let i = 0; i < dayIdx; i++) week.push(<td key={\"empty-\" + i}></td>);\r\n  days.forEach((day, i) => {\r\n    const isRecurring = recurringDates.some((d) => isSameDay(d, day));\r\n    week.push(\r\n      <td key={day.toISOString()} className={\r\n        \"p-1 \" +\r\n        (isRecurring\r\n          ? \"bg-blue-500 text-white rounded-full font-bold\"\r\n          : \"text-gray-700\")\r\n      }>\r\n        {format(day, \"d\")}\r\n      </td>\r\n    );\r\n    if (week.length === 7 || i === days.length - 1) {\r\n      rows.push(<tr key={day.toISOString()}>{week}</tr>);\r\n      week = [];\r\n    }\r\n  });\r\n  return rows;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
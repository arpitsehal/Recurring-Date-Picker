{"ast":null,"code":"import create from \"zustand\";\nexport const useRecurrenceStore = create(set => ({\n  frequency: \"daily\",\n  interval: 1,\n  weekdays: [],\n  // [0-6] for Sun-Sat\n  pattern: \"none\",\n  // none, first, second, etc.\n  startDate: \"\",\n  endDate: \"\",\n  exclusionDates: [],\n  // array of YYYY-MM-DD strings\n  endAfterOccurrences: \"\",\n  // number or empty string\n  startTime: \"\",\n  // HH:mm\n  endTime: \"\",\n  // HH:mm\n  rules: [{\n    frequency: \"daily\",\n    interval: 1,\n    weekdays: [],\n    pattern: \"none\"\n  }],\n  locale: \"en-US\",\n  dateFormat: \"yyyy-MM-dd\",\n  setFrequency: frequency => set({\n    frequency\n  }),\n  setInterval: interval => set({\n    interval\n  }),\n  setWeekdays: weekdays => set({\n    weekdays\n  }),\n  setPattern: pattern => set({\n    pattern\n  }),\n  setStartDate: startDate => set({\n    startDate\n  }),\n  setEndDate: endDate => set({\n    endDate\n  }),\n  setExclusionDates: exclusionDates => set({\n    exclusionDates\n  }),\n  setEndAfterOccurrences: endAfterOccurrences => set({\n    endAfterOccurrences\n  }),\n  setStartTime: startTime => set({\n    startTime\n  }),\n  setEndTime: endTime => set({\n    endTime\n  }),\n  addRule: rule => set(state => ({\n    rules: [...state.rules, rule]\n  })),\n  updateRule: (idx, rule) => set(state => ({\n    rules: state.rules.map((r, i) => i === idx ? rule : r)\n  })),\n  removeRule: idx => set(state => ({\n    rules: state.rules.filter((_, i) => i !== idx)\n  })),\n  setLocale: locale => set({\n    locale\n  }),\n  setDateFormat: dateFormat => set({\n    dateFormat\n  })\n}));","map":{"version":3,"names":["create","useRecurrenceStore","set","frequency","interval","weekdays","pattern","startDate","endDate","exclusionDates","endAfterOccurrences","startTime","endTime","rules","locale","dateFormat","setFrequency","setInterval","setWeekdays","setPattern","setStartDate","setEndDate","setExclusionDates","setEndAfterOccurrences","setStartTime","setEndTime","addRule","rule","state","updateRule","idx","map","r","i","removeRule","filter","_","setLocale","setDateFormat"],"sources":["C:/Users/sehal/OneDrive/Desktop/pearlthoughts/src/store/recurrenceStore.js"],"sourcesContent":["import create from \"zustand\";\r\n\r\nexport const useRecurrenceStore = create((set) => ({\r\n  frequency: \"daily\",\r\n  interval: 1,\r\n  weekdays: [], // [0-6] for Sun-Sat\r\n  pattern: \"none\", // none, first, second, etc.\r\n  startDate: \"\",\r\n  endDate: \"\",\r\n  exclusionDates: [], // array of YYYY-MM-DD strings\r\n  endAfterOccurrences: \"\", // number or empty string\r\n  startTime: \"\", // HH:mm\r\n  endTime: \"\", // HH:mm\r\n  rules: [\r\n    {\r\n      frequency: \"daily\",\r\n      interval: 1,\r\n      weekdays: [],\r\n      pattern: \"none\",\r\n    },\r\n  ],\r\n  locale: \"en-US\",\r\n  dateFormat: \"yyyy-MM-dd\",\r\n  setFrequency: (frequency) => set({ frequency }),\r\n  setInterval: (interval) => set({ interval }),\r\n  setWeekdays: (weekdays) => set({ weekdays }),\r\n  setPattern: (pattern) => set({ pattern }),\r\n  setStartDate: (startDate) => set({ startDate }),\r\n  setEndDate: (endDate) => set({ endDate }),\r\n  setExclusionDates: (exclusionDates) => set({ exclusionDates }),\r\n  setEndAfterOccurrences: (endAfterOccurrences) => set({ endAfterOccurrences }),\r\n  setStartTime: (startTime) => set({ startTime }),\r\n  setEndTime: (endTime) => set({ endTime }),\r\n  addRule: (rule) => set((state) => ({ rules: [...state.rules, rule] })),\r\n  updateRule: (idx, rule) => set((state) => ({ rules: state.rules.map((r, i) => (i === idx ? rule : r)) })),\r\n  removeRule: (idx) => set((state) => ({ rules: state.rules.filter((_, i) => i !== idx) })),\r\n  setLocale: (locale) => set({ locale }),\r\n  setDateFormat: (dateFormat) => set({ dateFormat }),\r\n})); "],"mappings":"AAAA,OAAOA,MAAM,MAAM,SAAS;AAE5B,OAAO,MAAMC,kBAAkB,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACjDC,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE,CAAC;EACXC,QAAQ,EAAE,EAAE;EAAE;EACdC,OAAO,EAAE,MAAM;EAAE;EACjBC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,EAAE;EACXC,cAAc,EAAE,EAAE;EAAE;EACpBC,mBAAmB,EAAE,EAAE;EAAE;EACzBC,SAAS,EAAE,EAAE;EAAE;EACfC,OAAO,EAAE,EAAE;EAAE;EACbC,KAAK,EAAE,CACL;IACEV,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE,CAAC;IACXC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE;EACX,CAAC,CACF;EACDQ,MAAM,EAAE,OAAO;EACfC,UAAU,EAAE,YAAY;EACxBC,YAAY,EAAGb,SAAS,IAAKD,GAAG,CAAC;IAAEC;EAAU,CAAC,CAAC;EAC/Cc,WAAW,EAAGb,QAAQ,IAAKF,GAAG,CAAC;IAAEE;EAAS,CAAC,CAAC;EAC5Cc,WAAW,EAAGb,QAAQ,IAAKH,GAAG,CAAC;IAAEG;EAAS,CAAC,CAAC;EAC5Cc,UAAU,EAAGb,OAAO,IAAKJ,GAAG,CAAC;IAAEI;EAAQ,CAAC,CAAC;EACzCc,YAAY,EAAGb,SAAS,IAAKL,GAAG,CAAC;IAAEK;EAAU,CAAC,CAAC;EAC/Cc,UAAU,EAAGb,OAAO,IAAKN,GAAG,CAAC;IAAEM;EAAQ,CAAC,CAAC;EACzCc,iBAAiB,EAAGb,cAAc,IAAKP,GAAG,CAAC;IAAEO;EAAe,CAAC,CAAC;EAC9Dc,sBAAsB,EAAGb,mBAAmB,IAAKR,GAAG,CAAC;IAAEQ;EAAoB,CAAC,CAAC;EAC7Ec,YAAY,EAAGb,SAAS,IAAKT,GAAG,CAAC;IAAES;EAAU,CAAC,CAAC;EAC/Cc,UAAU,EAAGb,OAAO,IAAKV,GAAG,CAAC;IAAEU;EAAQ,CAAC,CAAC;EACzCc,OAAO,EAAGC,IAAI,IAAKzB,GAAG,CAAE0B,KAAK,KAAM;IAAEf,KAAK,EAAE,CAAC,GAAGe,KAAK,CAACf,KAAK,EAAEc,IAAI;EAAE,CAAC,CAAC,CAAC;EACtEE,UAAU,EAAEA,CAACC,GAAG,EAAEH,IAAI,KAAKzB,GAAG,CAAE0B,KAAK,KAAM;IAAEf,KAAK,EAAEe,KAAK,CAACf,KAAK,CAACkB,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMA,CAAC,KAAKH,GAAG,GAAGH,IAAI,GAAGK,CAAE;EAAE,CAAC,CAAC,CAAC;EACzGE,UAAU,EAAGJ,GAAG,IAAK5B,GAAG,CAAE0B,KAAK,KAAM;IAAEf,KAAK,EAAEe,KAAK,CAACf,KAAK,CAACsB,MAAM,CAAC,CAACC,CAAC,EAAEH,CAAC,KAAKA,CAAC,KAAKH,GAAG;EAAE,CAAC,CAAC,CAAC;EACzFO,SAAS,EAAGvB,MAAM,IAAKZ,GAAG,CAAC;IAAEY;EAAO,CAAC,CAAC;EACtCwB,aAAa,EAAGvB,UAAU,IAAKb,GAAG,CAAC;IAAEa;EAAW,CAAC;AACnD,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
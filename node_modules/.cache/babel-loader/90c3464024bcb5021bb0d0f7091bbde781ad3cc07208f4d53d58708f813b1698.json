{"ast":null,"code":"import { addDays, addWeeks, addMonths, addYears, isBefore, isAfter, isSameDay, parseISO, format } from \"date-fns\";\n\n// Helper to get weekday index from string (\"Sun\" = 0, ...)\nexport function getWeekdayIndex(day) {\n  return [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].indexOf(day);\n}\n\n// Main recurrence calculation\nexport function getRecurringDates({\n  frequency,\n  interval,\n  weekdays,\n  pattern,\n  startDate,\n  endDate,\n  exclusionDates = [],\n  endAfterOccurrences\n}) {\n  if (!startDate) return [];\n  const start = parseISO(startDate);\n  const end = endDate ? parseISO(endDate) : addYears(start, 1); // default 1 year\n  let dates = [];\n  let current = start;\n  let count = 0;\n  const maxCount = endAfterOccurrences ? parseInt(endAfterOccurrences, 10) : null;\n  while (!isAfter(current, end) && (!maxCount || count < maxCount)) {\n    let add = false;\n    if (frequency === \"daily\") {\n      add = true;\n    } else if (frequency === \"weekly\") {\n      if (weekdays && weekdays.length > 0) {\n        for (let i = 0; i < 7; i++) {\n          const d = addDays(current, i);\n          if (weekdays.includes(d.getDay()) && !isAfter(d, end)) {\n            if ((isAfter(d, start) || isSameDay(d, start)) && !exclusionDates.includes(format(d, \"yyyy-MM-dd\"))) {\n              dates.push(d);\n              count++;\n              if (maxCount && count >= maxCount) return dates;\n            }\n          }\n        }\n        add = false;\n      } else {\n        add = true;\n      }\n    } else if (frequency === \"monthly\") {\n      if (pattern && pattern !== \"none\") {\n        const [nth, weekday] = pattern.split(\"-\");\n        const nthNum = [\"first\", \"second\", \"third\", \"fourth\", \"last\"].indexOf(nth);\n        let month = current.getMonth();\n        let year = current.getFullYear();\n        let day = getNthWeekdayOfMonth(year, month, getWeekdayIndex(weekday), nthNum);\n        if (day && !isAfter(day, end) && (isAfter(day, start) || isSameDay(day, start))) {\n          if (!exclusionDates.includes(format(day, \"yyyy-MM-dd\"))) {\n            dates.push(day);\n            count++;\n            if (maxCount && count >= maxCount) return dates;\n          }\n        }\n        add = false;\n      } else {\n        add = true;\n      }\n    } else if (frequency === \"yearly\") {\n      add = true;\n    }\n    if (add) {\n      if (!exclusionDates.includes(format(current, \"yyyy-MM-dd\"))) {\n        dates.push(current);\n        count++;\n        if (maxCount && count >= maxCount) return dates;\n      }\n    }\n    if (frequency === \"daily\") current = addDays(current, interval);else if (frequency === \"weekly\") current = addWeeks(current, interval);else if (frequency === \"monthly\") current = addMonths(current, interval);else if (frequency === \"yearly\") current = addYears(current, interval);\n  }\n  return dates;\n}\n\n// Helper: Get the nth weekday of a month (e.g., 2nd Tuesday)\nfunction getNthWeekdayOfMonth(year, month, weekday, nth) {\n  let date = new Date(year, month, 1);\n  let count = 0;\n  let lastMatch = null;\n  while (date.getMonth() === month) {\n    if (date.getDay() === weekday) {\n      count++;\n      lastMatch = new Date(date);\n      if (nth < 4 && count === nth + 1) return new Date(date);\n    }\n    date.setDate(date.getDate() + 1);\n  }\n  if (nth === 4) return lastMatch; // 'last'\n  return null;\n}","map":{"version":3,"names":["addDays","addWeeks","addMonths","addYears","isBefore","isAfter","isSameDay","parseISO","format","getWeekdayIndex","day","indexOf","getRecurringDates","frequency","interval","weekdays","pattern","startDate","endDate","exclusionDates","endAfterOccurrences","start","end","dates","current","count","maxCount","parseInt","add","length","i","d","includes","getDay","push","nth","weekday","split","nthNum","month","getMonth","year","getFullYear","getNthWeekdayOfMonth","date","Date","lastMatch","setDate","getDate"],"sources":["C:/Users/sehal/OneDrive/Desktop/pearlthoughts/src/utils/recurrenceUtils.js"],"sourcesContent":["import { addDays, addWeeks, addMonths, addYears, isBefore, isAfter, isSameDay, parseISO, format } from \"date-fns\";\r\n\r\n// Helper to get weekday index from string (\"Sun\" = 0, ...)\r\nexport function getWeekdayIndex(day) {\r\n  return [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].indexOf(day);\r\n}\r\n\r\n// Main recurrence calculation\r\nexport function getRecurringDates({ frequency, interval, weekdays, pattern, startDate, endDate, exclusionDates = [], endAfterOccurrences }) {\r\n  if (!startDate) return [];\r\n  const start = parseISO(startDate);\r\n  const end = endDate ? parseISO(endDate) : addYears(start, 1); // default 1 year\r\n  let dates = [];\r\n  let current = start;\r\n  let count = 0;\r\n  const maxCount = endAfterOccurrences ? parseInt(endAfterOccurrences, 10) : null;\r\n\r\n  while ((!isAfter(current, end) && (!maxCount || count < maxCount))) {\r\n    let add = false;\r\n    if (frequency === \"daily\") {\r\n      add = true;\r\n    } else if (frequency === \"weekly\") {\r\n      if (weekdays && weekdays.length > 0) {\r\n        for (let i = 0; i < 7; i++) {\r\n          const d = addDays(current, i);\r\n          if (weekdays.includes(d.getDay()) && !isAfter(d, end)) {\r\n            if ((isAfter(d, start) || isSameDay(d, start)) && (!exclusionDates.includes(format(d, \"yyyy-MM-dd\")))) {\r\n              dates.push(d);\r\n              count++;\r\n              if (maxCount && count >= maxCount) return dates;\r\n            }\r\n          }\r\n        }\r\n        add = false;\r\n      } else {\r\n        add = true;\r\n      }\r\n    } else if (frequency === \"monthly\") {\r\n      if (pattern && pattern !== \"none\") {\r\n        const [nth, weekday] = pattern.split(\"-\");\r\n        const nthNum = [\"first\", \"second\", \"third\", \"fourth\", \"last\"].indexOf(nth);\r\n        let month = current.getMonth();\r\n        let year = current.getFullYear();\r\n        let day = getNthWeekdayOfMonth(year, month, getWeekdayIndex(weekday), nthNum);\r\n        if (day && !isAfter(day, end) && (isAfter(day, start) || isSameDay(day, start))) {\r\n          if (!exclusionDates.includes(format(day, \"yyyy-MM-dd\"))) {\r\n            dates.push(day);\r\n            count++;\r\n            if (maxCount && count >= maxCount) return dates;\r\n          }\r\n        }\r\n        add = false;\r\n      } else {\r\n        add = true;\r\n      }\r\n    } else if (frequency === \"yearly\") {\r\n      add = true;\r\n    }\r\n    if (add) {\r\n      if (!exclusionDates.includes(format(current, \"yyyy-MM-dd\"))) {\r\n        dates.push(current);\r\n        count++;\r\n        if (maxCount && count >= maxCount) return dates;\r\n      }\r\n    }\r\n    if (frequency === \"daily\") current = addDays(current, interval);\r\n    else if (frequency === \"weekly\") current = addWeeks(current, interval);\r\n    else if (frequency === \"monthly\") current = addMonths(current, interval);\r\n    else if (frequency === \"yearly\") current = addYears(current, interval);\r\n  }\r\n  return dates;\r\n}\r\n\r\n// Helper: Get the nth weekday of a month (e.g., 2nd Tuesday)\r\nfunction getNthWeekdayOfMonth(year, month, weekday, nth) {\r\n  let date = new Date(year, month, 1);\r\n  let count = 0;\r\n  let lastMatch = null;\r\n  while (date.getMonth() === month) {\r\n    if (date.getDay() === weekday) {\r\n      count++;\r\n      lastMatch = new Date(date);\r\n      if (nth < 4 && count === nth + 1) return new Date(date);\r\n    }\r\n    date.setDate(date.getDate() + 1);\r\n  }\r\n  if (nth === 4) return lastMatch; // 'last'\r\n  return null;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
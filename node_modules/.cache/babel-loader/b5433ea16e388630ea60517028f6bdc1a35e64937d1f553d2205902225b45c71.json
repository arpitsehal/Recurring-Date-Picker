{"ast":null,"code":"import { addDays, addWeeks, addMonths, addYears, isBefore, isAfter, isSameDay, parseISO, format } from \"date-fns\";\n\n// Helper to get weekday index from string (\"Sun\" = 0, ...)\nexport function getWeekdayIndex(day) {\n  return [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].indexOf(day);\n}\n\n// Main recurrence calculation\nexport function getRecurringDates({\n  frequency,\n  interval,\n  weekdays,\n  pattern,\n  startDate,\n  endDate,\n  exclusionDates = []\n}) {\n  if (!startDate) return [];\n  const start = parseISO(startDate);\n  const end = endDate ? parseISO(endDate) : addYears(start, 1); // default 1 year\n  let dates = [];\n  let current = start;\n  while (!isAfter(current, end)) {\n    if (frequency === \"daily\") {\n      dates.push(current);\n      current = addDays(current, interval);\n    } else if (frequency === \"weekly\") {\n      // Add for each selected weekday in this week\n      if (weekdays && weekdays.length > 0) {\n        for (let i = 0; i < 7; i++) {\n          const d = addDays(current, i);\n          if (weekdays.includes(d.getDay()) && !isAfter(d, end)) {\n            if (isAfter(d, start) || isSameDay(d, start)) dates.push(d);\n          }\n        }\n      } else {\n        dates.push(current);\n      }\n      current = addWeeks(current, interval);\n    } else if (frequency === \"monthly\") {\n      if (pattern && pattern !== \"none\") {\n        // e.g., second Tuesday\n        const [nth, weekday] = pattern.split(\"-\");\n        const nthNum = [\"first\", \"second\", \"third\", \"fourth\", \"last\"].indexOf(nth);\n        let month = current.getMonth();\n        let year = current.getFullYear();\n        let day = getNthWeekdayOfMonth(year, month, getWeekdayIndex(weekday), nthNum);\n        if (day && !isAfter(day, end) && (isAfter(day, start) || isSameDay(day, start))) {\n          dates.push(day);\n        }\n      } else {\n        dates.push(current);\n      }\n      current = addMonths(current, interval);\n    } else if (frequency === \"yearly\") {\n      dates.push(current);\n      current = addYears(current, interval);\n    }\n  }\n  // Filter out exclusion dates\n  if (exclusionDates.length > 0) {\n    dates = dates.filter(d => !exclusionDates.includes(format(d, \"yyyy-MM-dd\")));\n  }\n  return dates;\n}\n\n// Helper: Get the nth weekday of a month (e.g., 2nd Tuesday)\nfunction getNthWeekdayOfMonth(year, month, weekday, nth) {\n  let date = new Date(year, month, 1);\n  let count = 0;\n  let lastMatch = null;\n  while (date.getMonth() === month) {\n    if (date.getDay() === weekday) {\n      count++;\n      lastMatch = new Date(date);\n      if (nth < 4 && count === nth + 1) return new Date(date);\n    }\n    date.setDate(date.getDate() + 1);\n  }\n  if (nth === 4) return lastMatch; // 'last'\n  return null;\n}","map":{"version":3,"names":["addDays","addWeeks","addMonths","addYears","isBefore","isAfter","isSameDay","parseISO","format","getWeekdayIndex","day","indexOf","getRecurringDates","frequency","interval","weekdays","pattern","startDate","endDate","exclusionDates","start","end","dates","current","push","length","i","d","includes","getDay","nth","weekday","split","nthNum","month","getMonth","year","getFullYear","getNthWeekdayOfMonth","filter","date","Date","count","lastMatch","setDate","getDate"],"sources":["C:/Users/sehal/OneDrive/Desktop/pearlthoughts/src/utils/recurrenceUtils.js"],"sourcesContent":["import { addDays, addWeeks, addMonths, addYears, isBefore, isAfter, isSameDay, parseISO, format } from \"date-fns\";\r\n\r\n// Helper to get weekday index from string (\"Sun\" = 0, ...)\r\nexport function getWeekdayIndex(day) {\r\n  return [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].indexOf(day);\r\n}\r\n\r\n// Main recurrence calculation\r\nexport function getRecurringDates({ frequency, interval, weekdays, pattern, startDate, endDate, exclusionDates = [] }) {\r\n  if (!startDate) return [];\r\n  const start = parseISO(startDate);\r\n  const end = endDate ? parseISO(endDate) : addYears(start, 1); // default 1 year\r\n  let dates = [];\r\n  let current = start;\r\n\r\n  while (!isAfter(current, end)) {\r\n    if (frequency === \"daily\") {\r\n      dates.push(current);\r\n      current = addDays(current, interval);\r\n    } else if (frequency === \"weekly\") {\r\n      // Add for each selected weekday in this week\r\n      if (weekdays && weekdays.length > 0) {\r\n        for (let i = 0; i < 7; i++) {\r\n          const d = addDays(current, i);\r\n          if (weekdays.includes(d.getDay()) && !isAfter(d, end)) {\r\n            if (isAfter(d, start) || isSameDay(d, start)) dates.push(d);\r\n          }\r\n        }\r\n      } else {\r\n        dates.push(current);\r\n      }\r\n      current = addWeeks(current, interval);\r\n    } else if (frequency === \"monthly\") {\r\n      if (pattern && pattern !== \"none\") {\r\n        // e.g., second Tuesday\r\n        const [nth, weekday] = pattern.split(\"-\");\r\n        const nthNum = [\"first\", \"second\", \"third\", \"fourth\", \"last\"].indexOf(nth);\r\n        let month = current.getMonth();\r\n        let year = current.getFullYear();\r\n        let day = getNthWeekdayOfMonth(year, month, getWeekdayIndex(weekday), nthNum);\r\n        if (day && !isAfter(day, end) && (isAfter(day, start) || isSameDay(day, start))) {\r\n          dates.push(day);\r\n        }\r\n      } else {\r\n        dates.push(current);\r\n      }\r\n      current = addMonths(current, interval);\r\n    } else if (frequency === \"yearly\") {\r\n      dates.push(current);\r\n      current = addYears(current, interval);\r\n    }\r\n  }\r\n  // Filter out exclusion dates\r\n  if (exclusionDates.length > 0) {\r\n    dates = dates.filter((d) => !exclusionDates.includes(format(d, \"yyyy-MM-dd\")));\r\n  }\r\n  return dates;\r\n}\r\n\r\n// Helper: Get the nth weekday of a month (e.g., 2nd Tuesday)\r\nfunction getNthWeekdayOfMonth(year, month, weekday, nth) {\r\n  let date = new Date(year, month, 1);\r\n  let count = 0;\r\n  let lastMatch = null;\r\n  while (date.getMonth() === month) {\r\n    if (date.getDay() === weekday) {\r\n      count++;\r\n      lastMatch = new Date(date);\r\n      if (nth < 4 && count === nth + 1) return new Date(date);\r\n    }\r\n    date.setDate(date.getDate() + 1);\r\n  }\r\n  if (nth === 4) return lastMatch; // 'last'\r\n  return null;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}